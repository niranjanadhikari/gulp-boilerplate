// ----------------------- responsive
@mixin mobile {
    @media (min-width: #{$mobile-width}) {
      @content;
    }
  }

  @mixin tablet {
    @media (min-width: #{$tablet-width}) {
      @content;
    }
  }

  @mixin laptop {
    @media (min-width: #{$laptop-width}) {
      @content;
    }
  }

  @mixin desktop {
    @media (min-width: #{$desktop-width}) {
      @content;
    }
  }

  // to center block element
  @mixin push--auto {
    margin: {
      left: auto;
      right: auto;
    }
  }

  // pseudo elements default cases
  @mixin pseudo($display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
  }

  // truncate words
  @mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  // clamping paragaraph
  @mixin clamper($lines-to-clamp) {
    display: -webkit-box;
    -webkit-line-clamp: $lines-to-clamp;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  // Clearfix float elements
  @mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
  }

  @mixin hide-visually($toggle: "hide") {
    @if not index("hide""unhide", $toggle) {
      @error "`#{$toggle}` is not a valid value for the `$toggle` argument in "+"the `hide-visually` mixin. Must be either `hide` or `unhide`.";
    }

    @else if ($toggle=="hide") {
      border: 0;
      clip: rect(1px, 1px, 1px, 1px);
      clip-path: inset(100%);
      height: 1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      white-space: nowrap;
      width: 1px;
    }

    @else if ($toggle == "unhide") {
      clip: auto;
      clip-path: none;
      height: auto;
      overflow: visible;
      position: static;
      white-space: inherit;
      width: auto;
    }
  }

  @mixin size($width) {
    width: $width;
    height: $width;
  }

  @mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation == "vertical" {
      /* Vertical gradient */
      background: linear-gradient(to bottom, $start-color, $end-color);
    }

    @else if $orientation == "horizontal" {
      /* Horizontal gradient */
      background: linear-gradient(to right, $start-color, $end-color);
    }

    @else {
      /* Radial gradient */
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
  }

  // box shadow
  @mixin box-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $color: $default) {
    box-shadow: $x-axis $y-axis $blur $color;
  }

  // absolute-center
  @mixin center($position) {
    position: absolute;

    @if $position == "vertical" {
      top: 50%;
      transform: translateY(-50%);
    }

    @else if $position == "horizontal" {
      left: 50%;
      transform: translate(-50%);
    }

    @else if $position == "both" {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }